#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("chat-application:server");
var http = require("http");
const socketIO = require("socket.io");
const { generateMessage, generateMessageLocation } = require("../utils/message");
const { isRealString } = require("../utils/isRealString");
const { Users } = require("../utils/users");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);
let io = socketIO(server);
let users = new Users();

/**
 * Listen on provided port, on all network interfaces.
 */
io.on("connection", socket => {
	// console.log("A new User just connected");

	socket.on("join", (params, callback) => {
		if (!isRealString(params.name) || !isRealString(params.room)) {
			return callback("Name and room are required");
		}
		//joining room
		socket.join(params.room);
		//removing room
		users.removeUser(socket.id);
		users.addUser(socket.id, params.name, params.room);

		io.to(params.room).emit("updateUsersList", users.getUserList(params.room));
		socket.emit("newMessage", generateMessage("Admin", `Welcome to chat room ${params.room}`));
		//for new user joined message to everyone
		socket.broadcast.to("newMessage", generateMessage("Admin", `${params.name} Joined`));
		callback();
	});
	socket.on("createMessage", (message, callback) => {
		let user = users.getUser(socket.id);
		// console.log("user", user);

		if (user && isRealString(message.text)) {
			io.to(user.room).emit("newMessage", generateMessage(user.name, message.text));
			// io.emit("newMessage", generateMessage(message.from, message.text));
		}
		// callback("this is the server");
		// socket.broadcast.emit("newMessage", {
		// 	from: message.from,
		// 	text: message.text,
		// 	createdAt: new Date().getTime(),
		// });
		callback();
	});
	socket.on("createLocationMessage", coords => {
		io.emit("newLocationMessage", generateMessageLocation("Admin", coords.lat, coords.lng));
	});

	socket.on("disconnect", () => {
		let user = users.removeUser(socket.id);

		if (user) {
			io.to(user.room).emit("updateUsersList", users.getUserList(user.room));
			io.to(user.room).emit(
				"newMessage",
				generateMessage("Admin", `${user.name} has left ${user.room} chat room`)
			);
		}
		// console.log("User was disconnected from server.");
	});
});

server.listen(port, () => {
	console.log(`Server is running on ${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}
